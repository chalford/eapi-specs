swagger: '2.0'
info:
  title: Items - Editorial API
  description: |
    The service implementing this API stores and retrieves content item metadata. Specifically, it does not store the actual "body" of the content (for example, image data, or an XML form). The endpoint does provide convenience 
    methods for clients wishing to upload their content in-band, which currently stores the content with the /object component in the Editorial API.
    
    This API uses RDF to markup the "content metadata" (which is distinct from operational metadata like security rules) of its output, including predicates found in the BBC Ontologies. Primarily, 
    [Creative Works](http://www.bbc.co.uk/ontologies/creativework) are used to provide common, core metadata. To remain flexible to the large variety of clients targeted for this API, any predicate can be used for storage and 
    retrieval. At a later date, the API may be extended to map other metadata standards into the core metadata (e.g. [Dublin Core](http://dublincore.org/documents/dc-rdf/)). It is important to note, however, that is API does not 
    behave as a triple store, and so ontology rules and inference will not be enforced.
    
    ## Lack of Filtering ##
    
    The Items resource provides **no** metadata filtering capabilities, in order to enable a flexible choice of underlying database. Single Items are retrieved with their unique itemIRI. All other use-cases for Item discovery, 
    including container filtering, should be performed on the Search endpoint, which maintains an index of all common and custom item fields.
    
    ## Types ##
    
    The primary reference for Types is the Types API Documentation. The typeIRI field used by Items can contain any IRI (except when creating containers, see below), but the recommended best practice is to use an IRI from the 
    Types API that is deferenceable.
    
    ## Containers ##
    
    The concept of a **container**, used in the "containerIRI" field, is defined as a set of content that is _mutually exclusive_ with the content of other containers. Containers are a specialised type of Item, and so can be operated
    on in the same way, including the storage and retrieval of metadata against them. They are managed with the item resources below, with the only restriction that they must specify the reserved type - _http://types/items:container_
    
    It is expected that users will require views consisting of content built from multiple containers, particularly where they have the permissions to view / edit content in multiple containers.
    
    They also provide a useful mechanism to bound or scope team content, providing a common alternative to per-tenant metadata that might be used to filter content shown to a user.
    
    ### Authorisation Inheritance ###
    
    Containers offer the mechansim of authorisation inheritance, where items inside of containers can choose to inherit the container's scopes. In order to create or move an item inside of a container, the principal performing the 
    operation must have write access to at least one of the containers scope assignments.
    
    When writing content, the content editor may choose whether that peice of content inherits the scopes of its container (in addition to its own), or whether scopes are provided solely by its own scope defintions.
    
    ## Authorisation ##
    
    This API accepts signed tokens (that is, tokens that have a cryptographically verifiable origin) that inform the service which scopes the requesting principal has access to. As this token is signed, it is not necessary to do 
    any further verification. The service will match the Items requested (or being created) to the set of scopes in the token, using the set of scopes defined by the scopes parameter on an Item (which can be inherited, see above)
    or Container.
    
    **Note:** The concepts used here are based on the "Partners & Scopes" work by Michael Eyles
  contact:
    name: Charlie Halford
  version: '0.1'
basePath: /
schemes:
  - https
produces:
  - application/json
  - application/ld+json
parameters:
  objectRedirect:
    # Question: Should we use a redirect here? Or can we bundle metadata and content up in one response?
    name: objectRedirect
    in: query
    description: Whether to provide a 302 redirect to the item's content
    required: false
    type: boolean
    default: false
  uuid:
    name: uuid
    in: path
    description: The UUID of the item
    required: true
    type: string
    pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
paths:
  /items/{uuid}:
    get:
      description: |
        Retrieve a single item, giving either the UUID component from the item's full IRI. When retrieving an item representation, there are a number of metadata properties that you can expect will always be present. These are:

        * dateCreated (CW)
        * dateModified (CW)
        * createdBy (CW)
        * lastModifiedBy
        * containerIRI
        * itemIRI
        * UUID
        * typeIRI
        * scopes
        * inheritScopes
        
        The _container_ parameter informs the client of the space within which that peice of content is mangaged. 
      summary: Retrieve the most recent version of the item, given the UUID
      parameters:
        - $ref: '#/parameters/uuid'
        - $ref: '#/parameters/objectRedirect'
      responses:
        '200':
          description: An item, with its set of default and custom metadata
          schema:
            $ref: '#/definitions/Item'
    put:
      description: |
        This endpoint allows a consumer to update a named resource, specifying either the UUID component of the IRI, or the full IRI. Updates are provided via the same request bodies as the create item POST request: either 
        application/json or multipart/form-data.
        
        Updates to existing metadata fields will overwrite the values of those fields. Existing fields not included in an update request WILL NOT be erased. Specifying the targetScope parameter will move the item from its 
        current scope to the new targeted scope. Write access to both scopes is required in this case.
        
        Updating the typeIRI parameter will change the item's current type to that of the new target. Be aware that clients + publishers can choose to use types and their definitions to validate an items content, and so you 
        should ensure that any updates to the type should be reflected in the content as appropriate.
        
        Updating the containerIRI parameter will require that the user has write permission to the current container (to remove the item), and write permission on the new container (to add the item).
        
        Once the PUT operation has completed, a new version of the item is created, incrementing the version number by 1. A GET request to an item will always return the most recent version for a given item (except when older 
        versions are explicitly requested).
      summary: Modify an item
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/uuid'
        - name: item
          in: body
          required: false
          schema:
            $ref: '#/definitions/NewItem'
      responses:
        '201':
          description: The new version created when modifying the item
          headers:
            'Location':
              description: A URI to the newly created Item version
              type: string
              default: 'http://items/xyz/versions/2'
  /items:
    get:
      description: |
        Retrieve a single item, giving the full IRI as a query parameter. When retrieving an item representation, there are a number of metadata properties that you can expect will always be present. These are:

        * dateCreated (CW)
        * dateModified (CW)
        * createdBy (CW)
        * lastModifiedBy
        * containerIRI
        * itemIRI
        * UUID
        * typeIRI
        * scopes
        * inheritScopes
        
        The _container_ parameter informs the client of the space within which that peice of content is mangaged. 
      summary: Retrieve the most recent version of the item, given the IRI
      parameters:
        - name: itemIRI
          in: query
          description: The IRI of the item
          required: true
          type: string
        - $ref: '#/parameters/objectRedirect'
      responses:
        '200':
          description: An item, with its set of default and custom metadata
          schema:
            $ref: '#/definitions/Item'
    post:
      description: |
        This endpoint allows the client to create an item and its metadata.
        
        Normally, metadata properties must be specified as full URIs (prefixes are only supported via JSON-LD). Clients can choose to omit the prefix or full IRI for a subset of Creative Work predicates, including title, 
        description and author. When using this shorthand form, the API will attempt to resolve them against the Creative Work ontology. If a shorthand term is used (e.g. "producer") that doesn't resolve to a Creative Work 
        predicate, the request will be rejected.
        
        The containerIRI field is required, and specifies the scope in which this item should be created. This scope must be writable to by the current user.
        
        The typeIRI field is also required, and is used to associate an item with a particular identifyable type. By convention, the type parameter should be set to an IRI from the /types endpoint, preferably a specific 
        version. However, consumers may insert any IRI they wish into this parameter, which provides convenience for integration scenarios where a consumer may have pre-existing type definitions.
        
        In the future, it may be possible for the client to include the withContent boolean flag with form-data Content-Types, uploading the content at the same time as the metadata in a field named "object". This will send 
        the uploaded file to the default object store.
        
        The response to this endpoint is the newly created resource, in the same format as the "Get a single item" GET request, along with a Location header.
      summary: Add an item, optionally referencing its content
      consumes:
        - application/json
      parameters:
        - name: item
          in: body
          required: false
          schema:
            $ref: '#/definitions/NewItem'
      responses:
        201:
          description: Item created
          headers:
            'Location':
              description: A URI to the newly created Item
              type: string
              default: 'http://items/xyz'
  /items/{uuid}/versions:
    get:
      description: |
        Retrieve a list of versions for the specified item. Each version has its own IRI, as well as a more convenient sequential integer.
      summary: Retrieve a list of versions for the specified item
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        '200':
          description: The list of versions for the specified item
          schema:
            type: array
            items:
              $ref: '#/definitions/VersionReference'
  /items/{uuid}/versions/{versionNumber}:
    get:
      description: |
        Retrieve a given version of the item, given the IRI of the Item (or UUID) and the version number.
      summary: Retrieve a given version of the item
      parameters:
        - $ref: '#/parameters/uuid'
        - name: versionNumber
          in: path
          type: integer
          minimum: 0
          required: true
      responses:
        '200':
          description: The versioned item resource
          schema:
            $ref: '#/definitions/VersionedItem'
          headers:
            'Link':
              description: Links to the Item IRI and the versions list
              type: string
              pattern: '<.*?>; rel="itemIRI", <.*?>; rel="versions"'
  /versions/{uuid}:
    get:
      description: |
        Retrieve a given version, providing the UUID
      summary: Retrieve a given version
      parameters:
        - $ref: '#/parameters/uuid'
      responses:
        '200':
          description: The versioned item resource
          schema:
            $ref: '#/definitions/VersionedItem'
          headers:
            'Link':
              description: Links to the Item IRI and the versions list
              type: string
              pattern: '<.*?>; rel="itemIRI", <.*?>; rel="versions"'
definitions:
  Item:
    allOf:
      - $ref: '#/definitions/NewItem'
      - type: object
        required:
          - itemIRI
          - uuid
          - dateCreated
          - dateModified
          - createdBy
          - lastModifiedBy
        properties:
          itemIRI:
            type: string
            pattern: 'http:\/\/[\w\.]+\/[\w-]+'
          uuid:
            type: string
            pattern: '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}'
          dateCreated:
            type: string
            #format: dateTime
          dateModified:
            type: string
            #format: dateTime
          createdBy:
            type: string
          lastModifiedBy:
            type: string
  NewItem:
    type: object
    required:
      - typeIRI
      - containerIRI
      - scopes
      - inheritScopes
    properties:
      typeIRI:
        type: string
        pattern: 'http:\/\/[\w\.]+\/[\w-]+'
      title:
        type: string
      description:
        type: string
      objectIRI:
        description: The IRI providing a de-referencable identifier for the actual content of an Item
        type: string
        pattern: 'http:\/\/[\w\.]+\/[\w-]+'
      containerIRI:
        type: string
        pattern: 'http:\/\/[\w\.]+\/[\w-]+'
      scopes:
        type: array
        items:
          $ref: '#/definitions/Scope'
      inheritScopes:
        type: boolean
        default: true
  Scope:
    type: object
    required:
      - scopeId
      - inherited
    properties:
      scopeId:
        type: string
      inherited:
        type: boolean
  VersionReference:
    type: object
    required:
      - versionIRI
      - itemVersionIRI
      - versionNumber
    properties:
      versionIRI:
        description: The directly addressable version IRI
        type: string
        pattern: 'http:\/\/[\w\.]+\/[\w-]+'
      itemVersionIRI:
        description: The 'convenience' IRI for retrieving a version by its number
        type: string
        pattern: 'http:\/\/[\w\.]+\/[\w-]+\/versions\/\d+'
      versionNumber:
        description: The version number against the item. This is immutable.
        type: integer
        minimum: 0
  VersionedItem:
    allOf:
      - $ref: '#/definitions/Item'
      - $ref: '#/definitions/VersionReference'